---
-

  # Hosts: where our play will run and options it will run with
  hosts: ubuntu-c
  tasks:
    - name: Create a customised Dockerfile
      copy:
        dest: ./Dockerfile
        mode: 0644
        content: |
          FROM ubuntu:latest
          LABEL maintainer="Mikael Gulapa"

          ENV DEBIAN_FRONTEND noninteractive

          ENV pip_packages "ansible"

          # Install dependencies.
          RUN apt-get update \
              && apt-get install -y --no-install-recommends \
                apt-utils \
                iputils-ping \
                telnet \
                nmap \
                netcat \
                build-essential \
                locales \
                libffi-dev \
                libssl-dev \
                libyaml-dev \
                python3-dev \
                python3-setuptools \
                python3-pip \
                python3-yaml \
                software-properties-common \
                rsyslog systemd systemd-cron sudo iproute2 \
              && rm -Rf /var/lib/apt/lists/* \
              && rm -Rf /usr/share/doc && rm -Rf /usr/share/man \
              && apt-get clean
          RUN sed -i 's/^\($ModLoad imklog\)/#\1/' /etc/rsyslog.conf

          # Upgrade pip to latest version.
          RUN pip3 install --upgrade pip

          # Fix potential UTF-8 errors with ansible-test.
          RUN locale-gen en_US.UTF-8

          # Install Ansible via Pip.
          RUN pip3 install $pip_packages

          # Install Ansible inventory file.
          RUN mkdir -p /etc/ansible
          RUN echo "[local]\nlocalhost ansible_connection=local" > /etc/ansible/hosts

          # Remove unnecessary getty and udev targets that result in high CPU usage when using
          # multiple containers with Molecule (https://github.com/ansible/molecule/issues/1104)
          RUN rm -f /lib/systemd/system/systemd*udev* \
            && rm -f /lib/systemd/system/getty.target

          VOLUME ["/sys/fs/cgroup", "/tmp", "/run"]
          CMD ["/lib/systemd/systemd"]

    - name: Build Ubuntu Ansible
      docker_image:
        name: ubuntu-ansible:latest
        source: build
        build:
          path: .
          pull: yes
        state: present
        force_source: yes

    - name: Create Ubuntu Ansible Server 1
      docker_container:
        name: ubuntu-ansible-1
        hostname: ubuntu-ansible-1
        image: ubuntu-ansible:latest
        ports:
          - 9080:80
        container_default_behavior: no_defaults
        recreate: yes

    - name: Create Ubuntu Ansible Server 2
      docker_container:
        name: ubuntu-ansible-2
        hostname: ubuntu-ansible-2
        image: ubuntu-ansible:latest
        ports:
          - 9081:80
        container_default_behavior: no_defaults
        recreate: yes

-

# TEST SECTION
  hosts: ubuntu-c
  tasks:
    - name: Get IP1
      command: "docker inspect --format '{''{ .NetworkSettings.IPAddress }''}' ubuntu-ansible-1"
      register: ip1
    - debug: msg="{{ ip1.stdout }}"         

    - name: Get IP2
      command: "docker inspect --format '{''{ .NetworkSettings.IPAddress }''}' ubuntu-ansible-2"
      register: ip2
    - debug: msg="{{ ip2.stdout }}"

    - name: Test Connetion 1to2
      command: docker exec ubuntu-ansible-1 bash -c "nmap {{ ip1.stdout }}  9081"
      register: nmapcmd1
    - debug: msg="{{ nmapcmd1 }}"
  
    - name: Test Connetion 2to1
      command: docker exec ubuntu-ansible-2 bash -c "nmap {{ ip1.stdout }} 9080"
      register: nmapcmd2
    - debug: msg="{{ nmapcmd2 }}" 

    - assert:
        that:
          - "'failed to determine route to' not in  nmapcmd2.stdout"
...